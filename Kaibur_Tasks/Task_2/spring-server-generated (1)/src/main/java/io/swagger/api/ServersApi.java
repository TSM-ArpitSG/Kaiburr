/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Server;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-03-26T20:09:08.116918182Z[GMT]")
@Validated
public interface ServersApi {


    @Operation(summary = "Create a new server", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request") })
    @RequestMapping(value = "/servers",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createServer(@Parameter(in = ParameterIn.DEFAULT, description = "Server object to be created", required=true, schema=@Schema()) @Valid @RequestBody Server body);


    @Operation(summary = "Delete server by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/servers/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteServerById(@Parameter(in = ParameterIn.PATH, description = "ID of server to delete", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get server by ID", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/servers/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> getServerById(@Parameter(in = ParameterIn.PATH, description = "ID of server to return", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get all servers", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/servers",
        method = RequestMethod.GET)
    ResponseEntity<Void> getServers();


    @Operation(summary = "Search servers by name", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/servers/search/{name}",
        method = RequestMethod.GET)
    ResponseEntity<Void> searchServersByName(@Parameter(in = ParameterIn.PATH, description = "Name of server to search", required=true, schema=@Schema()) @PathVariable("name") String name);


}

