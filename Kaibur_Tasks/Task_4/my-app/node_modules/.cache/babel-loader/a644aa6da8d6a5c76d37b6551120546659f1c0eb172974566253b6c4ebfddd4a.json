{"ast":null,"code":"var _jsxFileName = \"E:\\\\Kaibur_Tasks\\\\Task_4\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ServerForm from \"./ServerForm\";\nimport ServerTable from \"./ServerTable\";\nimport SearchById from \"./SearchById\";\nimport SearchByName from \"./SearchByName\";\nimport \"./App2.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [servers, setServers] = useState([]); // Set state variable for servers\n  const [message, setMessage] = useState(\"\"); // Set state variable for message\n\n  useEffect(() => {\n    // GET request to retrieve all servers\n    axios.get(\"http://localhost:8080/servers\").then(res => {\n      setServers(res.data); // Update state variable with server data\n    }).catch(err => {\n      console.log(err); // Log any errors to the console\n    });\n  }, []);\n  const handleSearchById = id => {\n    // GET request to search for a server by ID\n    axios.get(`http://localhost:8080/servers/${id}`).then(res => {\n      setServers(res.data); // Update state variable with server data\n    }).catch(err => {\n      console.log(err); // Log any errors to the console\n    });\n  };\n\n  const handleSearchByName = name => {\n    // GET request to search for a server by name\n    axios.get(`http://localhost:8080/servers?name=${name}`).then(res => {\n      setServers(res.data); // Update state variable with server data\n    }).catch(err => {\n      console.log(err); // Log any errors to the console\n    });\n  };\n\n  const handleCreateServer = server => {\n    // POST request to create a new server\n    axios.post(\"http://localhost:8080/servers\", server).then(res => {\n      setServers([...servers, res.data]); // Add new server to the state variable\n      setMessage(\"Server created successfully!\"); // Update message state variable\n    }).catch(err => {\n      console.log(err); // Log any errors to the console\n    });\n  };\n\n  const handleDelete = id => {\n    setServers(prevServers => prevServers.filter(server => server.id !== id)); // Update state variable with new array of servers after deleting a server\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kaiburr Task 4 - UI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ServerForm, {\n      onServerCreated: handleCreateServer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(SearchById, {\n      onSubmit: handleSearchById\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchByName, {\n      onSubmit: handleSearchByName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ServerTable, {\n      servers: servers,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UkjefCHYQSqlk4auJIMx+o8Ztz0=\");\n_c = App;\nexport default App;\n/* Code Written by @Arpit Singh 19BCG10069 */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","ServerForm","ServerTable","SearchById","SearchByName","jsxDEV","_jsxDEV","App","_s","servers","setServers","message","setMessage","get","then","res","data","catch","err","console","log","handleSearchById","id","handleSearchByName","name","handleCreateServer","server","post","handleDelete","prevServers","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onServerCreated","onSubmit","onDelete","_c","$RefreshReg$"],"sources":["E:/Kaibur_Tasks/Task_4/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ServerForm from \"./ServerForm\";\nimport ServerTable from \"./ServerTable\";\nimport SearchById from \"./SearchById\";\nimport SearchByName from \"./SearchByName\";\nimport \"./App2.css\"\n\nfunction App() {\n  const [servers, setServers] = useState([]); // Set state variable for servers\n  const [message, setMessage] = useState(\"\"); // Set state variable for message\n\n  useEffect(() => {\n    // GET request to retrieve all servers\n    axios.get(\"http://localhost:8080/servers\")\n      .then((res) => {\n        setServers(res.data); // Update state variable with server data\n      })\n      .catch((err) => {\n        console.log(err); // Log any errors to the console\n      });\n  }, []);\n\n  const handleSearchById = (id) => {\n    // GET request to search for a server by ID\n    axios.get(`http://localhost:8080/servers/${id}`)\n      .then((res) => {\n        setServers(res.data); // Update state variable with server data\n      })\n      .catch((err) => {\n        console.log(err); // Log any errors to the console\n      });\n  };\n\n  const handleSearchByName = (name) => {\n    // GET request to search for a server by name\n    axios.get(`http://localhost:8080/servers?name=${name}`)\n      .then((res) => {\n        setServers(res.data); // Update state variable with server data\n      })\n      .catch((err) => {\n        console.log(err); // Log any errors to the console\n      });\n  };\n\n  const handleCreateServer = (server) => {\n    // POST request to create a new server\n    axios.post(\"http://localhost:8080/servers\", server)\n      .then((res) => {\n        setServers([...servers, res.data]); // Add new server to the state variable\n        setMessage(\"Server created successfully!\"); // Update message state variable\n      })\n      .catch((err) => {\n        console.log(err); // Log any errors to the console\n      });\n  };\n\n  const handleDelete = (id) => {\n    setServers((prevServers) => prevServers.filter((server) => server.id !== id)); // Update state variable with new array of servers after deleting a server\n  };\n\n  return (\n    <div>\n      <h1>Kaiburr Task 4 - UI</h1>\n\n      <ServerForm onServerCreated={handleCreateServer} />\n      {message && <p>{message}</p>}\n      <SearchById onSubmit={handleSearchById} />\n      <SearchByName onSubmit={handleSearchByName} />\n      <ServerTable servers={servers} onDelete={handleDelete} /> \n    </div>\n  );\n}\n\nexport default App;\n/* Code Written by @Arpit Singh 19BCG10069 */\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}